// Arrow Function
function add(a,b) {
	console.log(a+b);
}

add = (a,b) => {console.log(a+b)}
add(7,3); // 10

// Pure Function

function test(a){
	console.log(a*5);
}
test(10); //


for(var i = 0; i<5 ;i++) {
	setTimeout(()=>console.log(i));
}
// 5 times 5 due to call stack, event loop, callback queue

for(let i = 0; i<5 ;i++) {
	setTimeout(()=>console.log(i));
}
// 0, 1, 2, 3, 4 due to scope of let



var arr = [1, 2, 3, 4, 5];
var avg = arr.average();
console.log(avg);

Array.prototype.average = function(){
	this.reduce(function(accumulator, currentVal){
		return ((accumulator+currentVal)/this.length);
	});
}

var arr = [1, 2, 3, 4, 5];
var avg = arr.average();
console.log(avg);


//
var arr1 = "john".split(''); //['j', 'o', 'h', 'n']
var arr2 = arr1.reverse(); // ['n', 'h', 'o', 'j']
var arr3 = "jones".split(''); // ['j', 'o', 'n', 'e', 's']
arr2.push(arr3); // ['n', 'h', 'o', 'j', ['j', 'o', 'n', 'e', 's']]
console.log("array 1: length=" + arr1.length + " last=" + arr1.slice(-1)); //array 1: length=5 last=j,o,n,e,s
console.log("array 2: length=" + arr2.length + " last=" + arr2.slice(-1)); //array 2: length=5 last=j,o,n,e,s



//
const length = 4;
const numbers = []; // 1, 2, 3, 4
for (var i = 0; i < length; i++);{
  numbers.push(i + 1);
}

//Object.freeze() vs const



var name = {
	fn: 'saikat',
	ln: 'm',
	getName: function(){
		return this.fn+''+this.ln;
	}
}

var name2 = {
	fn : 'ashoke',
	ln: 'm'
}

name2.myGetName = name.getName.bind(name2);







AMDOCS

===========================================
//Write a function that will return sum of values inside the array.
var array1 = [1,2,3,[4,5,[6,7,[8,9]]],[10,11,[12,13]]];

console.log(newArr);

function findDepth(array, depth){
	if(depth >0) {
		var newArr = array1.flat(3).reduce(function(item, currentval){
		if(item.isArray)
		return item+currentval;
	}
});
	
}


// Count array elementFromPoint

var arr = ['a', 'b', 'c', 'd', 'a', 'd', 'a', 'm', 'k'];
arr.sort();
var count = 0;
var currElm = null;
for(var i = 0 ; i<arr.length; i++) {
    
    if(arr[i] != currElm){
        if(count>0){
            console.log('in for curr '+currElm+' count =='+count);
        }
         currElm = arr[i];
         count = 1;
    } else {
        count++;
    }
    currElm = arr[i];
}
if(count>0){
            console.log('curr '+currElm+' count =='+count);
        }



var fruits = ['apple', 'mango', 'banana', 'strawberry', 'orange'];
fruits.forEach(function(item, index, array){
	console.log(item, index, array);
})

fruits.splice()




let users = [{name: 'john', age: 30}, {name: 'doe', age: 31}, {name: 'pal', age: 32}];
let newUsers = users.map((currVal, index, arr)=>{
	return [currVal.age]+1;
});


===============================================================================
var arr = [1, 2, 3, 4, 5];
var avg = arr.average();
console.log(avg);

Array.prototype.average = function(){
	this.reduce(function(accumulator, currentVal){
		return ((accumulator+currentVal)/this.length);
	});
}

var arr = [1, 2, 3, 4, 5];
var avg = arr.average();
console.log(avg);


//
var arr1 = "john".split(''); //['j', 'o', 'h', 'n']
var arr2 = arr1.reverse(); // ['n', 'h', 'o', 'j']
var arr3 = "jones".split(''); // ['j', 'o', 'n', 'e', 's']
arr2.push(arr3); // ['n', 'h', 'o', 'j', ['j', 'o', 'n', 'e', 's']]
console.log("array 1: length=" + arr1.length + " last=" + arr1.slice(-1)); //array 1: length=5 last=j,o,n,e,s
console.log("array 2: length=" + arr2.length + " last=" + arr2.slice(-1)); //array 2: length=5 last=j,o,n,e,s



//
const length = 4;
const numbers = []; // 1, 2, 3, 4
for (var i = 0; i < length; i++);{
  numbers.push(i + 1);
}

//Object.freeze() vs const



var name = {
	fn: 'saikat',
	ln: 'm',
	getName: function(){
		return this.fn+''+this.ln;
	}
}

var name2 = {
	fn : 'ashoke',
	ln: 'm'
}

name2.myGetName = name.getName.bind(name2);


=========================================================================================
HCL Tech
==========================================================================================

function outer(){
	var a = 10;
	function inner(){
		console.log(a+10);
	}
	inner();
}

outer();



sum(23)(22)(66)(6)

function sum(){
	return function(){
		return function(){
			return function(){
				
			}
		}
	}
}

var u1 = new User();
var u2 = new User();

User.prototype.getName = function(){
	
}


var p = new Promise(function(resolve, reject){
	
})
.then(res=>{
	
})
.then(res=>{
	
})
.catch(err=>{
	
})
.finally();




let arr = [[1, 2],[3, 4, [5, 6, [7, 8], 9]],[10, [11, 12]]];
let arr = [[1, 2],[3, 4, [5, 6, [7, 8], 9]],[10, [11, 12]]];
arr.flat(5)
(12) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
let arr = [[1, 2],[3, 4, [5, 6, [7, 8], 9]],[10, [11, 12]]];
arr.flat(Infinity)
(12) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]



var array1 = [1,2,3,4,5,2,4,24,2,4];
var duplicateArray = [];
for(var i = 0; i<array1.length; i++) {
	if(duplicateArray.includes(array1[i])){
		
	}
}

1 2 3 

3
2
1






==========================================================================
OpenText
==========================================================================
// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(S) {
    // write your code in JavaScript (Node.js 8.9.4)
    
    var splitted = S.split('');
    var newArr = [];
    var max  = 0;
    
    // for(var i = 0; i<splitted.length; i++) {
    //     let n = splitted[i]+''+splitted[i+1];
    //     if(n.length == 2){
    //         newArr.push(parseInt(n));
    //     }
    // }

    splitted.forEach(function(currentVal, index, array){
        let n = currentVal+''+array[index+1];
        if(n.length == 2){
            newArr.push(parseInt(n));
        }
    })
    
    if(newArr.length > 0) {
        max = newArr.reduce(function(accumulator, currentItem){
            return Math.max(accumulator, currentItem);
        });
    }

    return max;
    
}





Compilation successful.

Example test:   '50552'
Output:
[ '5', '0', '5', '5', '2' ]
OK

Example test:   '10101'
Output:
[ '1', '0', '1', '0', '1' ]
OK

Example test:   '88'
Output:
[ '8', '8' ]
OK

Producing output might cause your solution to fail performance tests.
You should remove code that produces output before you submit your solution.

Detected some errors.


